// === File: GameBootstrap.cs ===
using System;
using UnityEngine;
using VContainer;
using Zones.ScrollArea;
using Services.DragService;
using Zones.DropZones.Tower;
using Element;
using Services.ConfigProvider;
using Services.PoolService;
using Services.SaveLoadService;

public class GameBootstrap : MonoBehaviour
{
    private IObjectResolver container;
    private ISaveLoadService saveLoadService;

    [Inject]
    public void Construct(IObjectResolver container, ISaveLoadService saveLoadService)
    {
        this.container = container;
        this.saveLoadService = saveLoadService;
    }

    private void Start()
    {
        InitializeControllers();
        LoadGameState();
    }

    private void OnApplicationQuit()
    {
        SaveGameState();
    }

    private void OnApplicationPause(bool pauseStatus)
    {
        if (pauseStatus)
        {
            SaveGameState();
        }
    }

    private void InitializeControllers()
    {
        try
        {
            var scrollModel = container.Resolve<ScrollContainerModel>();

            var scrollFactory = container.Resolve<Func<(ScrollContainerModel, ScrollContainerView, IDragStartHandler,
                ObjectPool<ElementView>,
                Func<ElementType, ElementView>, IConfigProvider),
                ScrollContainerController>>();

            var scrollController = scrollFactory((
                scrollModel,
                container.Resolve<ScrollContainerView>(),
                container.Resolve<IDragStartHandler>(),
                container.Resolve<ObjectPool<ElementView>>(),
                container.Resolve<Func<ElementType, ElementView>>(),
                container.Resolve<IConfigProvider>()
            ));

            var dragHandler = container.Resolve<IDragStartHandler>();
            var towerController = container.Resolve<TowerContainerController>();
            towerController.Initialize(dragHandler);

            Debug.Log("Game controllers initialized successfully.");
        }
        catch (Exception e)
        {
            Debug.LogError($"Failed to initialize controllers: {e.Message}\n{e.StackTrace}");
        }
    }

    private void LoadGameState()
    {
        var config = container.Resolve<IConfigProvider>();
        var scrollModel = container.Resolve<ScrollContainerModel>();
        scrollModel.InitializeElements(config);

        var towerData = saveLoadService.LoadData();
        if (towerData == null)
        {
            Debug.Log("No saved tower data found. Starting fresh.");
            return;
        }

        try
        {
            var towerModel = container.Resolve<TowerContainerModel>();
            towerModel.LoadFromSaveData(towerData, config.AvailableTypes);

            var towerController = container.Resolve<TowerContainerController>();
            towerController.LoadFromSavedData();

            Debug.Log("Tower state loaded successfully.");
        }
        catch (Exception e)
        {
            Debug.LogError($"Failed to load tower state: {e.Message}\n{e.StackTrace}");
        }
    }

    private void SaveGameState()
    {
        try
        {
            var towerModel = container.Resolve<TowerContainerModel>();
            saveLoadService.SaveData(towerModel.ToSaveData());
            Debug.Log("Tower state saved successfully.");
        }
        catch (Exception e)
        {
            Debug.LogError($"Failed to save tower state: {e.Message}\n{e.StackTrace}");
        }
    }
}

// === File: GameConfig.cs ===
using Element;
using Services.ConfigProvider;
using UnityEngine;

[CreateAssetMenu(fileName = "ElementsType", menuName = "Game/ElementsType", order = 1)]
public class GameConfig : ScriptableObject, IConfigProvider
{
    [SerializeField] private ElementType[] availableTypes;
    [SerializeField] private int bottomCubeCount = 24;

    public ElementType[] AvailableTypes => availableTypes;
    public int BottomElementCount => bottomCubeCount;
}

// === File: GameInstaller.cs ===
using System;
using Element;
using Services.ConfigProvider;
using Services.DragService;
using Services.LocalizationService;
using Services.NotificationService;
using Services.PoolService;
using Services.SaveLoadService;
using UnityEngine;
using VContainer;
using VContainer.Unity;
using Zones.DropZones.DropRules;
using Zones.DropZones.Hole;
using Zones.DropZones.Tower;
using Zones.ScrollArea;

public class GameInstaller : LifetimeScope
{
    [Header("Prefabs")] [SerializeField] private ElementView containerElementViewPrefab;
    [SerializeField] private DraggingElementView draggingElementViewPrefab;
    [SerializeField] private HoleView holeViewPrefab;
    [SerializeField] private NotificationView notificationViewPrefab;

    [Header("Scene References")] [SerializeField]
    private ScrollContainerView scrollContainerView;

    [SerializeField] private TowerContainerView towerContainerView;
    [SerializeField] private Canvas canvas;

    [Header("Game Config")] [SerializeField]
    private GameConfig gameConfig;

    [SerializeField] private TextAsset jsonConfigFile;

    protected override void Configure(IContainerBuilder builder)
    {
        // Register scene instances
        builder.RegisterInstance(scrollContainerView).AsSelf();
        builder.RegisterInstance(holeViewPrefab).AsSelf();
        builder.RegisterInstance(towerContainerView).AsSelf();

        // Register ScriptableObject config
        builder.RegisterInstance(gameConfig).As<IConfigProvider>();

        // Localization service
        builder.Register<UnityLocalizationService>(Lifetime.Singleton).As<ILocalizationService>();

        // Object pool for ContainerElementView
        builder.Register<ObjectPool<ElementView>>(Lifetime.Singleton)
            .WithParameter("prefab", containerElementViewPrefab)
            .WithParameter("parent", (Transform)null)
            .AsSelf();

        // DraggingElementView prefab registration under Canvas
        builder.RegisterComponentInNewPrefab(draggingElementViewPrefab, Lifetime.Singleton)
            .UnderTransform(canvas.transform)
            .AsSelf();

        // Drop rules registration
        builder.Register<NonRestrictionTowerDropRule>(Lifetime.Singleton)
            .AsImplementedInterfaces()
            .AsSelf();

        // Models and controllers
        builder.Register<HoleModel>(Lifetime.Singleton);
        builder.Register<HoleController>(Lifetime.Singleton)
            .AsImplementedInterfaces()
            .AsSelf();

        builder.Register<TowerContainerModel>(Lifetime.Singleton);
        builder.Register<TowerContainerController>(Lifetime.Singleton)
            .AsImplementedInterfaces()
            .AsSelf();

        builder.Register<JsonFileSaveLoadService>(Lifetime.Singleton)
            .AsImplementedInterfaces()
            .AsSelf();

        builder.Register<DraggingElementModel>(Lifetime.Singleton);
        builder.Register<DragController>(Lifetime.Singleton);

        // DragHandler component on new GameObject under Canvas
        builder.RegisterComponentOnNewGameObject<DragHandler>(Lifetime.Scoped)
            .UnderTransform(canvas.transform)
            .AsImplementedInterfaces()
            .AsSelf();

        // Notification view component registration
        builder.RegisterComponent(notificationViewPrefab)
            .AsImplementedInterfaces()
            .AsSelf();

        builder.Register<NotificationService>(Lifetime.Singleton).AsSelf();

        // Factory for creating ContainerElementView from ElementType
        builder.RegisterFactory<ElementType, ElementView>(container =>
        {
            var pool = container.Resolve<ObjectPool<ElementView>>();
            return elementType =>
            {
                var view = pool.Get();
                view.SetSprite(elementType.Sprite);
                return view;
            };
        }, Lifetime.Singleton);

        builder.Register<ScrollContainerModel>(Lifetime.Singleton);

        builder.RegisterFactory<(ScrollContainerModel, ScrollContainerView, IDragStartHandler,
            ObjectPool<ElementView>, Func<ElementType, ElementView>, IConfigProvider),
            ScrollContainerController>(
            _ =>
            {
                return tuple => new ScrollContainerController(
                    tuple.Item1,
                    tuple.Item2,
                    tuple.Item3,
                    tuple.Item5,
                    tuple.Item6);
            }, Lifetime.Singleton);
    }
}

// === File: Controller.cs ===
using System;

namespace Core
{
    public abstract class Controller<TModel, TView> : IController
        where TModel : class, IModel
        where TView : View
    {
        public TModel Model { get; private set; }
        public TView View { get; private set; }

        public Type GetModelType() => typeof(TModel);
        public Type GetViewType() => typeof(TView);

        public Controller(TModel model, TView view)
        {
            SetModel(model);
            SetView(view);
        }

        public void SetModel(TModel model)
        {
            OnBeforeModelChanged();
            Model = model;
            OnModelChanged();
        }

        public void SetView(TView view)
        {
            OnBeforeViewChanged();
            View = view;
            OnViewChanged();
        }

        public void SetModel(object model)
        {
            if (model == null)
            {
                SetModel(default(TModel));
                return;
            }

            if (model is not TModel tModel)
            {
                throw new ArgumentException("Wrong model type");
            }

            SetModel(tModel);
        }

        public void SetView(object view)
        {
            if (view == null)
            {
                SetView(default(TView));
                return;
            }

            if (view is not TView tView)
            {
                throw new ArgumentException("Wrong view type");
            }

            SetView(tView);
        }

        protected virtual void OnBeforeModelChanged()
        {
        }

        protected virtual void OnModelChanged()
        {
        }

        protected virtual void OnBeforeViewChanged()
        {
        }

        protected virtual void OnViewChanged()
        {
        }
    }
}

// === File: IController.cs ===
namespace Core
{
    public interface IController
    {
        public void SetModel(object model);
        public void SetView(object view);
    }
}

// === File: IModel.cs ===
namespace Core
{
    public interface IModel
    {
        
    }
}

// === File: View.cs ===
using UnityEngine;

namespace Core
{
    public abstract class View : MonoBehaviour { }
}

// === File: GameConfigEditor.cs ===
using Element;
using UnityEditor;
using UnityEngine;

namespace Editor
{
    [CustomEditor(typeof(GameConfig))]
    public class GameConfigEditor : UnityEditor.Editor
    {
        public override void OnInspectorGUI()
        {
            DrawDefaultInspector();

            var config = (GameConfig)target;

            GUILayout.Space(10);

            if (GUILayout.Button("Конвертировать выделенные Texture2D в ElementType"))
            {
                ConvertSelectedTexturesToElementTypes(config);
            }
        }

        private void ConvertSelectedTexturesToElementTypes(GameConfig config)
        {
            var guids = Selection.assetGUIDs;
            if (guids.Length == 0)
            {
                Debug.LogWarning("Нет выделенных объектов в проекте.");
                return;
            }

            var texturesList = new System.Collections.Generic.List<Texture2D>();

            foreach (var guid in guids)
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                var tex = AssetDatabase.LoadAssetAtPath<Texture2D>(path);
                if (tex != null)
                {
                    texturesList.Add(tex);
                }
            }

            if (texturesList.Count == 0)
            {
                Debug.LogWarning("В выделении нет Texture2D.");
                return;
            }

            Undo.RecordObject(config, "Convert Textures to ElementTypes");

            var elementTypes = new ElementType[texturesList.Count];

            for (var i = 0; i < texturesList.Count; i++)
            {
                var tex = texturesList[i];

                // Создаём спрайт из текстуры
                var sprite = AssetDatabase.LoadAssetAtPath<Sprite>(AssetDatabase.GetAssetPath(tex));
                if (sprite == null)
                {
                    sprite = Sprite.Create(tex, new Rect(0, 0, tex.width, tex.height), new Vector2(0.5f, 0.5f));
                }

                elementTypes[i] = new ElementType
                {
                    ID = tex.name,
                    Sprite = sprite
                };
            }

            var so = new SerializedObject(config);
            var prop = so.FindProperty("availableTypes");
            if (prop != null)
            {
                prop.arraySize = elementTypes.Length;
                for (var i = 0; i < elementTypes.Length; i++)
                {
                    var elemProp = prop.GetArrayElementAtIndex(i);
                    var idProp = elemProp.FindPropertyRelative("ID");
                    var spriteProp = elemProp.FindPropertyRelative("Sprite");

                    idProp.stringValue = elementTypes[i].ID;
                    spriteProp.objectReferenceValue = elementTypes[i].Sprite;
                }
                so.ApplyModifiedProperties();
                EditorUtility.SetDirty(config);
                Debug.Log($"Успешно конвертировано {elementTypes.Length} ElementType в {config.name}");
            }
            else
            {
                Debug.LogError("В GameConfig нет поля availableTypes");
            }
        }
    }
}


// === File: ElementModel.cs ===
using Core;

namespace Element
{
    public abstract class ElementModel : IModel
    {
        public ElementType ElementType;
    }
}

// === File: ElementType.cs ===
using System;
using UnityEngine;

namespace Element
{
    [Serializable]
    public struct ElementType
    {
        public string ID;
        public Sprite Sprite;
    }
}

// === File: ElementView.cs ===
using UnityEngine;
using UnityEngine.EventSystems;
using System;
using Core;
using UnityEngine.UI;

namespace Element
{
    public class ElementView : View, IBeginDragHandler, IDragHandler, IEndDragHandler
    {
        [SerializeField] protected Image image;
        [SerializeField] protected CanvasGroup canvasGroup;

        public event Action<PointerEventData> OnBeginDragEvent;
        public event Action<PointerEventData> OnDragEvent;
        public event Action<PointerEventData> OnEndDragEvent;
        public event Action<ElementModel> OnRemoveRequested;

        public void SetSprite(Sprite sprite)
        {
            if (image != null) image.sprite = sprite;
        }

        public void SetAlpha(float value)
        {
            if (canvasGroup != null) canvasGroup.alpha = value;
        }

        public virtual void OnBeginDrag(PointerEventData eventData) => OnBeginDragEvent?.Invoke(eventData);
        public virtual void OnDrag(PointerEventData eventData) => OnDragEvent?.Invoke(eventData);
        public virtual void OnEndDrag(PointerEventData eventData) => OnEndDragEvent?.Invoke(eventData);
        public virtual void OnRemove(ElementModel elementModel) => OnRemoveRequested?.Invoke(elementModel);
    }
}

// === File: IConfigProvider.cs ===
using Element;

namespace Services.ConfigProvider
{
    public interface IConfigProvider
    {
        ElementType[] AvailableTypes { get; }
        int BottomElementCount { get; }
    }
}

// === File: DragController.cs ===
using UnityEngine.EventSystems;
using Element;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using PrimeTween;

namespace Services.DragService
{
    public class DragController
    {
        private readonly DraggingElementModel model;
        private readonly DraggingElementView view;
        private readonly IReadOnlyList<IDropZone> dropZones;
        private readonly NotificationService.NotificationService notificationService;

        public DragController(DraggingElementModel model, DraggingElementView view, IReadOnlyList<IDropZone> dropZones,
            NotificationService.NotificationService notificationService)
        {
            this.model = model;
            this.view = view;
            this.dropZones = dropZones;
            this.notificationService = notificationService;

            view.OnDragEvent += eventData => OnDrag(model, view, eventData);
            view.OnEndDragEvent += eventData => OnEndDrag(model, view, eventData);
            view.OnRemoveRequested += ViewOnOnRemoveRequested;
        }

        private void ViewOnOnRemoveRequested(ElementModel obj)
        {
            model.OriginalView.OnRemove(model.OriginalModel);
        }

        public void StartDrag(ElementModel elementModel, ElementView elementView, PointerEventData eventData)
        {
            model.ElementType = elementModel.ElementType;
            model.OriginalModel = elementModel;
            model.OriginalView = elementView;
            view.Show(model.ElementType.Sprite, elementView.transform.position);
            eventData.pointerDrag = view.gameObject;
        }

        private void OnDrag(DraggingElementModel model, DraggingElementView view, PointerEventData eventData)
        {
            view.SetPosition(eventData.position);
        }

        private void OnEndDrag(DraggingElementModel model, DraggingElementView view, PointerEventData eventData)
        {
            var targetZone = dropZones.FirstOrDefault(zone => zone.IsInsideZone(eventData.position));
            if (targetZone == null)
            {
                view.FadeOutAndHide(0.3f);
                _ = notificationService.ShowNotification("MissCube");
                return;
            }


            Vector3 targetPosition = eventData.position;
            if (targetZone is Zones.DropZones.Tower.TowerContainerController tower)
            {
                var rectTransform = tower.View?.GetComponent<RectTransform>();
                if (rectTransform != null && tower.Model.ElementCount > 0)
                {
                    var topElement = tower.Model.GetElementAt(tower.Model.ElementCount - 1);
                    var topPos = tower.Model.GetElementPosition(tower.Model.ElementCount - 1, 0.5f);
                    RectTransformUtility.ScreenPointToWorldPointInRectangle(rectTransform, eventData.position, null,
                        out var worldPos);
                    targetPosition = new Vector3(worldPos.x, topPos.y + topElement.ElementHeight, worldPos.z);
                }
            }

            var startPosition = model.OriginalView != null
                ? model.OriginalView.transform.position
                : view.transform.position;


            var dropped = targetZone.TryDropElement(model, view, eventData.position);
            if (!dropped)
            {
                AnimateJumpToPosition(view, startPosition, targetPosition, () => { view.FadeOutAndHide(0.1f); });
                _ = notificationService.ShowNotification("MissCube");
            }
            else
            {
                view.Hide();
            }
        }

        private void AnimateJumpToPosition(DraggingElementView view, Vector3 startPosition, Vector3 targetPosition,
            System.Action onComplete)
        {
            if (view == null)
            {
                Debug.LogWarning("DraggingElementView is null");
                return;
            }

            var rectTransform = view.GetComponent<RectTransform>();
            if (rectTransform == null)
            {
                Debug.LogWarning("RectTransform is null on DraggingElementView");
                return;
            }

            view.SetAlpha(1);
            var startPos2D = new Vector2(startPosition.x, startPosition.y);
            var targetPos2D = new Vector2(targetPosition.x, targetPosition.y);
            const float duration = 0.3f;

            rectTransform.position = startPosition;

            Tween.Custom(0f, 1f, duration, t =>
                {
                    var x = Mathf.Lerp(startPos2D.x, targetPos2D.x, t);
                    var y = Mathf.Lerp(startPos2D.y, targetPos2D.y, t);

                    rectTransform.position = new Vector3(x, y, startPosition.z);
                }, Ease.Linear)
                .OnComplete(onComplete);
        }
    }
}

// === File: DraggingElementModel.cs ===
using Element;

namespace Services.DragService
{
    public class DraggingElementModel : ElementModel
    {
        public ElementModel OriginalModel;
        public ElementView OriginalView;
    }
}

// === File: DraggingElementView.cs ===
using Element;
using UnityEngine;
using UnityEngine.EventSystems;
using PrimeTween;

namespace Services.DragService
{
    public class DraggingElementView : ElementView
    {
        private Tween fadeTween;
        private void Awake() => gameObject.SetActive(false);

        public void Show(Sprite sprite, Vector3 position)
        {
            SetSprite(sprite);
            SetPosition(position);

            canvasGroup.alpha = 0.5f;
            gameObject.SetActive(true);
        }

        public void FadeOutAndHide(float duration)
        {
            if (canvasGroup == null || canvasGroup.alpha == 0f)
            {
                Hide();
                return;
            }
            if (fadeTween.isAlive)
            {
                fadeTween.Stop();
            }
            fadeTween = Tween.Alpha(canvasGroup, 0f, duration, Ease.InQuad)
                .OnComplete(Hide);
        }

        public void Hide() => gameObject.SetActive(false);
        public void SetPosition(Vector3 position) => transform.position = position;
    }
}

// === File: DragHandler.cs ===
using Element;
using UnityEngine;
using UnityEngine.EventSystems;
using VContainer;

namespace Services.DragService
{
    public class DragHandler : MonoBehaviour, IDragStartHandler
    {
        private DragController draggingController;

        [Inject]
        public void Construct(DragController draggingController)
        {
            this.draggingController = draggingController;
        }

        public void OnDragStart(ElementModel elementModel, ElementView elementView, PointerEventData eventData)
        {
            draggingController.StartDrag(elementModel, elementView, eventData);
        }
    }
}

// === File: IDragStartHandler.cs ===
using Element;
using UnityEngine.EventSystems;

namespace Services.DragService
{
    public interface IDragStartHandler
    {
        void OnDragStart(ElementModel elementModel, ElementView elementView, PointerEventData eventData);
    }
}

// === File: IDropZone.cs ===
using Element;
using UnityEngine;

namespace Services.DragService
{
    public interface IDropZone
    {
        bool IsInsideZone(Vector3 screenPosition);
        bool TryDropElement(ElementModel elementModel, ElementView elementView, Vector3 dropWorldPosition);
    }
}

// === File: ILocalizationService.cs ===
using System.Threading.Tasks;

namespace Services.LocalizationService
{
    public interface ILocalizationService
    {
        Task<string> GetStringAsync(string key);
    }
}

// === File: UnityLocalizationService.cs ===
using System.Threading.Tasks;
using UnityEngine.Localization;
using UnityEngine.ResourceManagement.AsyncOperations;

namespace Services.LocalizationService
{
    public class UnityLocalizationService : ILocalizationService
    {
        public Task<string> GetStringAsync(string key)
        {
            var tcs = new TaskCompletionSource<string>();

            var localizedString = new LocalizedString
            {
                TableReference = "NotificationTable",
                TableEntryReference = key
            };

            var handle = localizedString.GetLocalizedStringAsync();

            handle.Completed += op => { tcs.SetResult(op.Status == AsyncOperationStatus.Succeeded ? op.Result : key); };

            return tcs.Task;
        }
    }
}

// === File: NotificationService.cs ===
using System.Threading.Tasks;
using Services.LocalizationService;
using UnityEngine;

namespace Services.NotificationService
{
    public class NotificationService
    {
        private readonly ILocalizationService localizationService;
        private readonly NotificationView notificationView;

        public NotificationService(ILocalizationService localizationService, NotificationView notificationView)
        {
            this.localizationService = localizationService;
            this.notificationView = notificationView;
        }

        public async Task ShowNotification(string localizationKey, float duration = 2f)
        {
            if (string.IsNullOrEmpty(localizationKey))
            {
                Debug.LogWarning("Notification key is empty");
                return;
            }

            var localizedText = await localizationService.GetStringAsync(localizationKey);

            notificationView.Show(localizedText, duration);
        }
    }
}

// === File: NotificationView.cs ===
using Core;
using PrimeTween;
using TMPro;
using UnityEngine;

namespace Services.NotificationService
{
    public class NotificationView : View
    {
        [SerializeField] private TMP_Text textComponent;
        [SerializeField] private CanvasGroup canvasGroup;
        private Sequence showTween;

        private void Awake()
        {
            if (canvasGroup == null)
                canvasGroup = GetComponent<CanvasGroup>();
            if (textComponent == null)
                textComponent = GetComponentInChildren<TMP_Text>();
            gameObject.SetActive(false);
        }

        public void Show(string message, float displayDuration = 2f, float fadeDuration = 1f)
        {
            gameObject.SetActive(false);
            if (showTween.isAlive)
            {
                showTween.Stop();
            }

            textComponent.text = message;
            if (canvasGroup.alpha != 0f)
            {
                canvasGroup.alpha = 0f;
            }

            gameObject.SetActive(true);

            showTween = Tween.Alpha(canvasGroup, 1f, 0.3f, Ease.OutQuad)
                .Chain(Tween.Delay(displayDuration))
                .Chain(Tween.Alpha(canvasGroup, 0f, fadeDuration, Ease.InQuad))
                .OnComplete(() => { gameObject.SetActive(false); });
        }
    }
}

// === File: IDataPersistenceService.cs ===
namespace Services.PersistentService
{
    public interface IDataPersistenceService<TData>
    {
        void SaveData(TData data);
        TData LoadData();
        bool HasData();
    }
}

// === File: ObjectPool.cs ===
using System.Collections.Generic;
using UnityEngine;

namespace Services.PoolService
{
    public class ObjectPool<T> where T : Component
    {
        private readonly T prefab;
        private readonly Transform parent;
        private readonly Queue<T> poolQueue = new();

        public ObjectPool(T prefab, Transform parent = null)
        {
            this.prefab = prefab;
            this.parent = parent;
        }

        public T Get()
        {
            if (poolQueue.Count > 0)
            {
                var obj = poolQueue.Dequeue();
                obj.gameObject.SetActive(true);
                return obj;
            }
            else
            {
                var obj = Object.Instantiate(prefab, parent);
                return obj;
            }
        }

        public void ReturnToPool(T obj)
        {
            obj.gameObject.SetActive(false);
            obj.transform.SetParent(parent, false);
            poolQueue.Enqueue(obj);
        }

        public void Clear()
        {
            while (poolQueue.Count > 0)
            {
                var obj = poolQueue.Dequeue();
                Object.Destroy(obj.gameObject);
            }
        }

        public void PreWarm(int count, Transform parent = null)
        {
            var targetParent = parent ?? this.parent;
            for (var i = 0; i < count; i++)
            {
                var obj = Object.Instantiate(prefab, targetParent, worldPositionStays: false);
                obj.gameObject.SetActive(false);
                poolQueue.Enqueue(obj);
            }
        }
    }
}

// === File: ISaveLoadService.cs ===
using Services.PersistentService;

namespace Services.SaveLoadService
{
    public interface ISaveLoadService : IDataPersistenceService<TowerSaveData>
    {
    }
}

// === File: JsonFileSaveLoadService.cs ===
using System;
using System.IO;
using UnityEngine;

namespace Services.SaveLoadService
{
    public class JsonFileSaveLoadService : ISaveLoadService
    {
        private readonly string saveFilePath = Path.Combine(Application.persistentDataPath, "tower_save.json");

        public void SaveData(TowerSaveData data)
        {
            try
            {
                var json = JsonUtility.ToJson(data, prettyPrint: true);
                File.WriteAllText(saveFilePath, json);
                Debug.Log($"Saved tower state to {saveFilePath}");
            }
            catch (Exception e)
            {
                Debug.LogError($"Failed to save tower state: {e}");
            }
        }

        public TowerSaveData LoadData()
        {
            if (!HasData())
                return null;

            try
            {
                var json = File.ReadAllText(saveFilePath);
                return JsonUtility.FromJson<TowerSaveData>(json);
            }
            catch (Exception e)
            {
                Debug.LogError($"Failed to load tower state: {e}");
                return null;
            }
        }

        public bool HasData()
        {
            return File.Exists(saveFilePath);
        }
    }
}

// === File: TowerSaveData.cs ===
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Services.SaveLoadService
{
    [Serializable]
    public class TowerSaveData
    {
        public List<SavedTowerElement> Elements = new();

        public SerializableVector3 BasePosition;

        [Serializable]
        public class SavedTowerElement
        {
            public string ElementTypeID;
            public float HorizontalOffset;
            public int Index;
            public float ElementHeight;
        }
    }


    [Serializable]
    public struct SerializableVector3
    {
        public float x;
        public float y;
        public float z;

        public SerializableVector3(Vector3 v)
        {
            x = v.x;
            y = v.y;
            z = v.z;
        }

        public Vector3 ToVector3() => new(x, y, z);
    }
}

// === File: DropRules.cs ===
using Element;
using Zones.DropZones.Tower;

namespace Zones.DropZones.DropRules
{
    public class NonRestrictionTowerDropRule : IDropRule
    {
        public bool CanAddElement(ElementModel element, TowerContainerModel towerContainer) => true;
    }

    public class OnlyOneColorTowerDropRule : IDropRule
    {
        public bool CanAddElement(ElementModel element, TowerContainerModel towerContainer)
        {
            if (towerContainer.Elements.Count == 0)
                return true;

            return element.ElementType.ID == towerContainer.Elements[0].ElementType.ID;
        }
    }
}

// === File: IDropRule.cs ===
using Element;
using Zones.DropZones.Tower;

namespace Zones.DropZones.DropRules
{
    public interface IDropRule
    {
        bool CanAddElement(ElementModel element, TowerContainerModel towerContainer);
    }
}

// === File: HoleController.cs ===
using Core;
using Element;
using Services.DragService;
using Services.NotificationService;
using UnityEngine;

namespace Zones.DropZones.Hole
{
    public class HoleController : Controller<HoleModel, HoleView>, IDropZone
    {
        private readonly NotificationService notificationService;

        public HoleController(HoleModel model, HoleView view, NotificationService notificationService)
            : base(model, view)
        {
            this.notificationService = notificationService;
        }

        public bool IsInsideZone(Vector3 screenPosition)
        {
            if (View == null) return false;
            var rectTransform = View.GetComponent<RectTransform>();
            return rectTransform != null &&
                   RectTransformUtility.RectangleContainsScreenPoint(rectTransform, screenPosition);
        }

        public bool TryDropElement(ElementModel elementModel, ElementView elementView, Vector3 worlPosition)
        {
            if (elementView == null) return false;

            elementView.OnRemove(elementModel);
            _ = notificationService.ShowNotification("DropHole");
            return true;
        }
    }
}

// === File: HoleModel.cs ===
using Core;
using UnityEngine;

namespace Zones.DropZones.Hole
{
    public class HoleModel : IModel
    {
        public Vector3 Position { get; set; }
        public Vector2 EllipseSize { get; set; }

        public bool IsPointInsideEllipse(Vector2 point)
        {
            var center = new Vector2(Position.x, Position.y);
            var halfSize = EllipseSize / 2f;

            var delta = point - center;
            var normX = delta.x / halfSize.x;
            var normY = delta.y / halfSize.y;

            return (normX * normX + normY * normY) <= 1f;
        }
    }
}

// === File: HoleView.cs ===
using Core;

namespace Zones.DropZones.Hole
{
    public class HoleView : View
    {
        
    }
}

// === File: TowerContainerController.cs ===
using System.Collections.Generic;
using System.Linq;
using Core;
using Element;
using Services.DragService;
using Services.NotificationService;
using Services.PoolService;
using UnityEngine;
using UnityEngine.EventSystems;
using Zones.DropZones.DropRules;
using Zones.DropZones.Tower.TowerElement;
using PrimeTween;

namespace Zones.DropZones.Tower
{
    public class TowerContainerController : Controller<TowerContainerModel, TowerContainerView>, IDropZone
    {
        private IDragStartHandler dragStartHandler;
        private readonly IReadOnlyList<IDropRule> dropRules;
        private readonly NotificationService notificationService;
        private readonly ObjectPool<ElementView> elementPool;
        private readonly List<(TowerElementModel model, ElementView view)> activeElements = new();

        public TowerContainerController(IReadOnlyList<IDropRule> dropRules, TowerContainerModel model,
            TowerContainerView view, ObjectPool<ElementView> elementPool,
            NotificationService notificationService) : base(model, view)
        {
            this.dropRules = dropRules;
            this.elementPool = elementPool;
            this.notificationService = notificationService;
        }

        public void Initialize(IDragStartHandler dragStartHandler)
        {
            this.dragStartHandler = dragStartHandler;
            elementPool.PreWarm(20, View.ElementsContainer);
        }

        public void LoadFromSavedData()
        {
            ClearActiveElements();
            for (int i = 0; i < Model.ElementCount; i++)
            {
                var m = Model.GetElementAt(i);
                var view = elementPool.Get();
                view.SetSprite(m.ElementType.Sprite);
                view.transform.SetParent(View.ElementsContainer, false);
                view.OnBeginDragEvent += eventData => OnElementBeginDrag(m, view, eventData);
                view.OnDragEvent += eventData => OnElementDrag(m, view, eventData);
                view.OnEndDragEvent += eventData => OnElementEndDrag(m, view, eventData);
                view.OnRemoveRequested += RemoveElement;
                activeElements.Add((m, view));
            }
            UpdateElementsPositions();
        }

        private void ClearActiveElements()
        {
            foreach (var (_, v) in activeElements)
            {
                elementPool.ReturnToPool(v);
            }
            activeElements.Clear();
        }

        public bool TryDropElement(ElementModel elementModel, ElementView elementView, Vector3 dropWorldPosition)
        {
            if (elementModel is DraggingElementModel { OriginalModel: TowerElementModel })
            {
                return true;
            }

            if (Model == null || View == null) return false;
            if (!dropRules.All(r => r.CanAddElement(elementModel, Model)))
            {
                return false;
            }

            var rectTransform = View.GetComponent<RectTransform>();
            if (rectTransform == null) return false;
            if (!IsInsideZone(dropWorldPosition))
            {
                _ = notificationService.ShowNotification("MissCube");
                return false;
            }

            if (Model.Elements.Count == 0)
            {
                if (RectTransformUtility.ScreenPointToLocalPointInRectangle(rectTransform, dropWorldPosition, null,
                        out var localPoint))
                {
                    var rect = rectTransform.rect;
                    var clampedX = Mathf.Clamp(localPoint.x, rect.xMin, rect.xMax);
                    var clampedY = Mathf.Clamp(localPoint.y, rect.yMin, rect.yMax);
                    Model.BasePosition = new Vector2(clampedX, clampedY);
                }
                else
                {
                    return false;
                }
            }
            else
            {
                var zoneTopY = rectTransform.rect.yMax;
                var baseY = Model.BasePosition.y;
                var availableHeight = zoneTopY - baseY;
                var rect = elementView.GetComponent<RectTransform>();
                var newElementHeight = rect != null ? rect.rect.height * elementView.transform.localScale.y : 0f;
                if (!Model.CanAddElement(newElementHeight, availableHeight))
                {
                    _ = notificationService.ShowNotification("HeightLimit");
                    return false;
                }
            }

            AddElementInternal(elementModel.ElementType);
            _ = notificationService.ShowNotification("PlaceCube");
            return true;
        }

        public bool IsInsideZone(Vector3 screenPosition)
        {
            if (View == null) return false;
            var rectTransform = View.GetComponent<RectTransform>();
            if (rectTransform == null) return false;
            if (Model.Elements.Count == 0)
            {
                return RectTransformUtility.RectangleContainsScreenPoint(rectTransform, screenPosition);
            }

            if (activeElements.Count == 0) return false;
            var topView = activeElements.Last().view;
            var topRect = topView.GetComponent<RectTransform>();
            return topRect != null && RectTransformUtility.RectangleContainsScreenPoint(topRect, screenPosition);
        }

        private void AddElementInternal(ElementType elementType)
        {
            var view = elementPool.Get();
            view.SetSprite(elementType.Sprite);
            view.transform.SetParent(View.ElementsContainer, false);
            var rect = view.GetComponent<RectTransform>();
            if (rect == null)
            {
                Debug.LogError("RectTransform not found on element view");
                elementPool.ReturnToPool(view);
                return;
            }

            var elementWidth = rect.rect.width * view.transform.localScale.x;
            var elementHeight = rect.rect.height * view.transform.localScale.y;
            
            var model = TowerElementModel.Create(elementType, elementWidth);
            model.ElementHeight = elementHeight;
            Model.AddElement(model);
            
            view.OnBeginDragEvent += eventData => OnElementBeginDrag(model, view, eventData);
            view.OnDragEvent += eventData => OnElementDrag(model, view, eventData);
            view.OnEndDragEvent += eventData => OnElementEndDrag(model, view, eventData);
            view.OnRemoveRequested += RemoveElement;
            
            activeElements.Add((model, view));
            UpdateElementsPositions();
        }

        private void RemoveElement(ElementModel elementModel)
        {
            var index = activeElements.FindIndex(p => p.model == elementModel);
            if (index < 0) return;

            (_, var v) = activeElements[index];
            activeElements.RemoveAt(index);
            Model.RemoveElementAt(index);
            elementPool.ReturnToPool(v);

            AnimateDropDown(index);
        }

        private void OnElementBeginDrag(TowerElementModel model, ElementView view, PointerEventData eventData)
        {
            dragStartHandler?.OnDragStart(model, view, eventData);
        }

        private void OnElementEndDrag(TowerElementModel model, ElementView view, PointerEventData eventData)
        {
        }

        private void OnElementDrag(TowerElementModel model, ElementView view, PointerEventData eventData)
        {
        }

        private void AnimateDropDown(int startIndex)
        {
            const float duration = 0.5f;
            for (var i = startIndex; i < activeElements.Count; i++)
            {
                var (_, view) = activeElements[i];
                var rt = view.GetComponent<RectTransform>();
                if (rt == null) continue;
                var newPos = Model.GetElementPosition(i, rt.pivot.y);
                Tween.LocalPosition(rt, newPos, duration, Ease.InOutQuad);
            }
        }

        private void UpdateElementsPositions()
        {
            for (var i = 0; i < activeElements.Count; i++)
            {
                (var model, var view) = activeElements[i];
                model.Index = i;
                var rt = view.GetComponent<RectTransform>();
                if (rt == null) continue;
                var pos = Model.GetElementPosition(i, rt.pivot.y);
                rt.localPosition = pos;
            }
        }
    }
}

// === File: TowerContainerModel.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using Core;
using Element;
using Services.SaveLoadService;
using UnityEngine;
using Zones.DropZones.Tower.TowerElement;

namespace Zones.DropZones.Tower
{
    public class TowerContainerModel : IModel
    {
        private readonly List<TowerElementModel> elements = new();

        public IReadOnlyList<TowerElementModel> Elements => elements;
        public Vector2 BasePosition { get; set; }
        public float CurrentHeight => elements.Sum(element => element.ElementHeight);
        public int ElementCount => elements.Count;

        public void AddElement(TowerElementModel element)
        {
            element.Index = elements.Count;
            elements.Add(element);
        }

        public void RemoveElementAt(int index)
        {
            elements.RemoveAt(index);
            for (var i = 0; i < elements.Count; i++)
            {
                elements[i].Index = i;
            }
        }

        public TowerElementModel GetElementAt(int index) => elements[index];

        public void SetElementAt(int index, TowerElementModel element) => elements[index] = element;

        public Vector3 GetElementPosition(int index, float pivotY = 0.5f)
        {
            var y = BasePosition.y;
            var x = BasePosition.x + elements[index].HorizontalOffset;

            for (var i = 0; i < index; i++)
            {
                y += elements[i].ElementHeight;
            }

            var offset = elements[index].ElementHeight * pivotY;
            var posY = y - offset;

            return new Vector3(x, posY, 0);
        }

        public bool CanAddElement(float newElementHeight, float availableHeight)
        {
            if (elements.Count == 0)
                return true;

            return (availableHeight - CurrentHeight) >= newElementHeight;
        }

        public TowerSaveData ToSaveData()
        {
            var data = new TowerSaveData();
            foreach (var element in Elements)
            {
                data.Elements.Add(new TowerSaveData.SavedTowerElement
                {
                    ElementTypeID = element.ElementType.ID,
                    HorizontalOffset = element.HorizontalOffset,
                    Index = element.Index,
                    ElementHeight = element.ElementHeight
                });
            }

            data.BasePosition = new SerializableVector3(BasePosition);

            return data;
        }

        public void LoadFromSaveData(TowerSaveData data, ElementType[] availableTypes)
        {
            elements.Clear();

            foreach (var savedElement in data.Elements)
            {
                var type = availableTypes.FirstOrDefault(t => t.ID == savedElement.ElementTypeID);
                if (string.IsNullOrEmpty(type.ID))
                {
                    Debug.LogWarning(
                        $"ElementType with ID {savedElement.ElementTypeID} not found in available types. Пропускаем элемент.");
                    continue;
                }

                var element = new TowerElementModel
                {
                    ElementType = type,
                    HorizontalOffset = savedElement.HorizontalOffset,
                    Index = savedElement.Index,
                    ElementHeight = savedElement.ElementHeight
                };

                elements.Add(element);
            }
            
            BasePosition = data.BasePosition.ToVector3();
        }
    }
}

// === File: TowerContainerView.cs ===
using Core;
using UnityEngine;

namespace Zones.DropZones.Tower
{
    public class TowerContainerView : View
    {
        [SerializeField] private Transform elementsContainer;
        public Transform ElementsContainer => elementsContainer;
    }
}

// === File: TowerElementModel.cs ===
using Element;
using UnityEngine;

namespace Zones.DropZones.Tower.TowerElement
{
    public class TowerElementModel : ElementModel
    {
        public float HorizontalOffset;
        public int Index;
        public float ElementHeight;

        public static TowerElementModel Create(ElementType elementType, float elementWidth)
        {
            var maxHorizontalOffset = elementWidth * 0.5f;

            return new TowerElementModel
            {
                ElementType = elementType,
                HorizontalOffset = Random.Range(-maxHorizontalOffset, maxHorizontalOffset),
                Index = -1,
                ElementHeight = 0f
            };
        }
    }
}

// === File: ScrollContainerController.cs ===
using Core;
using System;
using Services.DragService;
using System.Collections.Generic;
using Element;
using Services.ConfigProvider;
using Services.PoolService;
using UnityEngine.EventSystems;
using Zones.ScrollArea.ScrollElement;

namespace Zones.ScrollArea
{
    public class ScrollContainerController : Controller<ScrollContainerModel, ScrollContainerView>
    {
        private readonly IDragStartHandler dragStartHandler;
        private readonly Func<ElementType, ElementView> elementFactory;
        private readonly List<(ScrollElementModel model, ElementView view)> activeElements = new();

        public ScrollContainerController(ScrollContainerModel model, ScrollContainerView view,
            IDragStartHandler dragStartHandler, Func<ElementType, ElementView> elementFactory,
            IConfigProvider configProvider) : base(model, view)
        {
            this.elementFactory = elementFactory;
            this.dragStartHandler = dragStartHandler;
            Model.InitializeElements(configProvider);
            RefreshElements();
        }

        protected override void OnModelChanged()
        {
            base.OnModelChanged();
            RefreshElements();
        }

        private void RefreshElements()
        {
            ClearElements();
            if (Model?.ElementsScroll == null || elementFactory == null)
            {
                return;
            }

            foreach (var elementModel in Model.ElementsScroll)
            {
                var elementView = elementFactory(elementModel.ElementType);
                elementView.SetSprite(elementModel.ElementType.Sprite);
                elementView.transform.SetParent(View.transform, false);
                elementView.OnBeginDragEvent += eventData => OnElementBeginDrag(elementModel, elementView, eventData);
                activeElements.Add((elementModel, elementView));
            }
        }

        private void ClearElements()
        {
            activeElements.Clear();
        }

        private void OnElementBeginDrag(ScrollElementModel model, ElementView view, PointerEventData eventData)
        {
            dragStartHandler?.OnDragStart(model, view, eventData);
        }
    }
}

// === File: ScrollContainerModel.cs ===
using System.Collections.Generic;
using Core;
using Element;
using Services.ConfigProvider;
using Zones.ScrollArea.ScrollElement;

namespace Zones.ScrollArea
{
    public class ScrollContainerModel : IModel
    {
        public readonly List<ScrollElementModel> ElementsScroll = new();

        public void InitializeElements(IConfigProvider configProvider)
        {
            ElementsScroll.Clear();
            var availableTypes = configProvider.AvailableTypes;
            var bottomElementCount = configProvider.BottomElementCount;

            if (availableTypes == null || availableTypes.Length == 0 ||
                bottomElementCount <= 0)
                return;
            
            var perTypeCount = bottomElementCount / availableTypes.Length;
            var remainder = bottomElementCount % availableTypes.Length;
            for (var i = 0; i < availableTypes.Length; i++)
            {
                var count = perTypeCount + (i < remainder ? 1 : 0);
                var type = availableTypes[i];
                for (var j = 0; j < count; j++)
                {
                    ElementsScroll.Add(new ScrollElementModel
                    {
                        ElementType = type
                    });
                }
            }
        }
    }
}

// === File: ScrollContainerView.cs ===
using Core;

namespace Zones.ScrollArea
{
    public class ScrollContainerView : View
    {
        
    }
}

// === File: ScrollElementModel.cs ===
using Element;

namespace Zones.ScrollArea.ScrollElement
{
    public class ScrollElementModel : ElementModel
    {
        
    }
}

// === Directory Structure ===
// List of all directories (including empty) with relative paths from the selected folder:
// ./
// Core/
// Editor/
// Element/
// Services/
// Services/ConfigProvider/
// Services/DragService/
// Services/LocalizationService/
// Services/NotificationService/
// Services/PersistentService/
// Services/PoolService/
// Services/SaveLoadService/
// Zones/
// Zones/DropZones/
// Zones/DropZones/DropRules/
// Zones/DropZones/Hole/
// Zones/DropZones/Tower/
// Zones/DropZones/Tower/TowerElement/
// Zones/ScrollArea/
// Zones/ScrollArea/ScrollElement/

// === File Structure ===
// List of all .cs files with relative paths from the selected folder:
// GameBootstrap.cs
// GameConfig.cs
// GameInstaller.cs
// Core/Controller.cs
// Core/IController.cs
// Core/IModel.cs
// Core/View.cs
// Editor/GameConfigEditor.cs
// Element/ElementModel.cs
// Element/ElementType.cs
// Element/ElementView.cs
// Services/ConfigProvider/IConfigProvider.cs
// Services/DragService/DragController.cs
// Services/DragService/DraggingElementModel.cs
// Services/DragService/DraggingElementView.cs
// Services/DragService/DragHandler.cs
// Services/DragService/IDragStartHandler.cs
// Services/DragService/IDropZone.cs
// Services/LocalizationService/ILocalizationService.cs
// Services/LocalizationService/UnityLocalizationService.cs
// Services/NotificationService/NotificationService.cs
// Services/NotificationService/NotificationView.cs
// Services/PersistentService/IDataPersistenceService.cs
// Services/PoolService/ObjectPool.cs
// Services/SaveLoadService/ISaveLoadService.cs
// Services/SaveLoadService/JsonFileSaveLoadService.cs
// Services/SaveLoadService/TowerSaveData.cs
// Zones/DropZones/DropRules/DropRules.cs
// Zones/DropZones/DropRules/IDropRule.cs
// Zones/DropZones/Hole/HoleController.cs
// Zones/DropZones/Hole/HoleModel.cs
// Zones/DropZones/Hole/HoleView.cs
// Zones/DropZones/Tower/TowerContainerController.cs
// Zones/DropZones/Tower/TowerContainerModel.cs
// Zones/DropZones/Tower/TowerContainerView.cs
// Zones/DropZones/Tower/TowerElement/TowerElementModel.cs
// Zones/ScrollArea/ScrollContainerController.cs
// Zones/ScrollArea/ScrollContainerModel.cs
// Zones/ScrollArea/ScrollContainerView.cs
// Zones/ScrollArea/ScrollElement/ScrollElementModel.cs

